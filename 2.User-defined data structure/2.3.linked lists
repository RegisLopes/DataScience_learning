class linked list (Nodes)

A linked list is composed by nodes which have data and the link to the next node.

The first node is called head.
The last node has the peculiarity of having its link pointing to None.


P.S.: linked lists can be used to create other data structures such as stacks, queues and graphs.

one can add and remove nodes from a linked list just like items from a list.

Methods:
add_at_front()
add_at_end()
print_list

Creating a linked list:

class Node:
  def __init__(self, data, next):
    self.data = data
    self.next = next

class LinkedList:  
  def __init__(self):
    self.head = None
  
  def add_at_front(self.data):
    self.head = Node(data, self.head)

  def add_at_end(self, data):
    if not self.head:
      self.head = Node(data, None)
        return
    curr = self.head
    while curr.next:
      curr = curr.next
    curr.next = Node(data,None)

  def get_last_noe(self):
    n= self.head
    while(n.next != None):
      n = n.next
    return n.data
  
  def print_list(self):
    n = self.head
    while n!=None:
      print(n.data, end="=>")
      n = n.next
    print()


